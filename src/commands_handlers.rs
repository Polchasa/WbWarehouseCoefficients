use std::error::Error;
use teloxide::prelude::*;
use crate::{api_reauests::*, keyboards::main_menu};

use crate::{database::*, token_decoder::*};
use crate::keyboards::create_warehouse_keyboard;

pub async fn help_command_handler(bot: Bot, id: ChatId) -> Result<(), Box<dyn Error + Send + Sync>> {
    let help_description = "/start - –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. (–≠—Ç–æ –¥–µ–π—Å—Ç–∏–≤–µ –¥–æ–±–∞–≤–∏—Ç —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–º –∏ —Ç–∞–∫ –∂–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–Ω—ã—Ö –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è—Ö)";
    bot.send_message(id, help_description).await?;
    Ok(())
}

pub async fn start_command_handler(bot: Bot, msg: &Message) -> Result<(), Box<dyn Error + Send + Sync>> {   
    let id = UserId(msg.chat.id.0.try_into()?);
    let username = get_username_from_msg(&msg);
    add_user_to_db(id, username).await?; //  –¥–æ–±–∞–≤–∏–º —é–∑–µ—Ä–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    set_user_state(id, State::Idle).await?;
    bot.send_message(msg.chat.id, 
        "üçÜ –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å <b>Wildberris</b>! üçÜ\n\n–ù–∞ <b>Wildberris</b> —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º (–≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–¥–µ—é—Å—å —Å–º–æ–≥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ üòã–≤–∫—É—Å–Ω—ã—Öüòã –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç–∞—Ö), –∞ —Ç–∞–∫ –∂–µ –Ω–∞–π–¥—É —Å–ª–æ—Ç —Å <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–ª–∏ –ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏–µ–º–∫–æ–π</b> –¥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç–∞.\n\n–í—ã–±–∏—Ä–∞–π!")
    .parse_mode(teloxide::types::ParseMode::Html)
    .reply_markup(main_menu())
    .await?;
    Ok(())
}

pub async fn msg_to_all_command_handler(bot: Bot, msg: &Message, text: String) -> Result<(), Box<dyn Error + Send + Sync>> {
    let username: String = get_username_from_msg(&msg);
    let admin_username = "SET_YOUR_LOGIN_HERE".to_string(); // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    let command_sender_id = msg.chat.id.0;

    if username == admin_username {
        let user_ids = get_user_ids().await?;
        for user in user_ids {
            if user != command_sender_id {
                bot.send_message(ChatId(user), &text).await?;
            }            
        }
        bot.send_message(msg.chat.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º.").await?;
        } else {            
            let response_text = format!("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–Ω–æ –ø—Ä–∞–≤.");
            bot.send_message(msg.chat.id, response_text).await?;
        }
    Ok(())
}

pub async fn text_msg_handler(bot: Bot, msg: &Message) -> Result<(), Box<dyn Error + Send + Sync>> {
    let id = UserId(msg.chat.id.0.try_into()?);
    let user_state = get_user_state(id).await?;
    if user_state == State::AwaitingToken {
        let token = msg.text().unwrap_or("").to_string(); // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        let is_token_valid = check_token(&token).await?;
        if is_token_valid {
            set_user_state(id, State::Idle).await?;
            set_user_token(id, token.to_string()).await?;   
            fetch_warehouses(&token).await?;
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥")
            .reply_markup(create_warehouse_keyboard(0, 10).await)
            .await?;
        } else {
            if is_token_expired(token).await? {
                bot.send_message(msg.chat.id, "–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω").await?;
            } else {
                bot.send_message(msg.chat.id, "–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω").await?;
            }
        }
    }
    Ok(())
}

pub async fn bot_started_msg(bot: Bot) -> Result<(), Box<dyn Error + Send + Sync>> {
    let id_i64 = get_id_by_username("polchasaa".to_string()).await?;
    let id = ChatId(id_i64);
    bot.send_message(id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω".to_string()).await?;
    Ok(())
}

fn get_username_from_msg(msg: &Message) -> String {
    match &msg.from {
        Some(user) => match &user.username {
            Some(name) => name.clone(),
            None => "no_username".to_string(),
        }
        None => "no_username".to_string(),
    }
}