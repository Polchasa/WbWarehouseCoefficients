use crate::database::{
    count_user_numbers, count_warehouses, get_user_browser_profiles_page, get_warehouses_page,
};
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup, UserId};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
pub fn main_menu() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![InlineKeyboardButton::callback(
            "üìç–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç—ã —Å–∫–ª–∞–¥–æ–≤",
            "warehouses_list_callback",
        )],
    ])
}

pub fn to_main_menu_button() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![vec![InlineKeyboardButton::callback(
        "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "main_menu",
    )]])
}

pub async fn create_warehouse_keyboard(page: i32, page_size: i32) -> InlineKeyboardMarkup {
    let warehouses = get_warehouses_page(page, page_size).await.unwrap();
    let total_warehouses = count_warehouses().await.unwrap();
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = vec![];

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
    for w in warehouses {
        buttons.push(vec![InlineKeyboardButton::callback(
            w.name,
            format!("whid:{}", w.id.to_string()),
        )]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    let mut nav_buttons = vec![];
    if page > 0 {
        nav_buttons.push(InlineKeyboardButton::callback(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            format!("w_page:{}", page - 1),
        ));
    }
    if (page + 1) * page_size < total_warehouses {
        nav_buttons.push(InlineKeyboardButton::callback(
            "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            format!("w_page:{}", page + 1),
        ));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if !nav_buttons.is_empty() {
        buttons.push(nav_buttons);
    }
    buttons.push(vec![InlineKeyboardButton::callback(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "main_menu",
    )]);

    InlineKeyboardMarkup::new(buttons)
}

pub fn create_box_types_keyboard(
    box_types: Vec<String>,
    warehouse_id: i32,
) -> InlineKeyboardMarkup {
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = vec![];
    for t in box_types {
        buttons.push(vec![InlineKeyboardButton::callback(
            t.clone(),
            format!("boxtype:{} whid:{}", t, warehouse_id),
        )]);
    }
    buttons.push(vec![InlineKeyboardButton::callback(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "main_menu",
    )]);

    InlineKeyboardMarkup::new(buttons)
}

pub fn create_coefficents_keyboard(btype: i32, _page: i32) -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![InlineKeyboardButton::callback(
            "üì¶–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏",
            format!("another_box_type_callback:{}", btype),
        )],
        vec![InlineKeyboardButton::callback(
            "üìç–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥",
            format!("another_warehouse_callback"),
        )],
        vec![InlineKeyboardButton::callback(
            "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "main_menu",
        )],
    ])
}

pub async fn create_user_profiles_keyboard(
    id: UserId,
    page: i32,
    page_size: i32,
) -> InlineKeyboardMarkup {
    let phones = get_user_browser_profiles_page(id, page, page_size)
        .await
        .unwrap();
    let total_warehouses = count_user_numbers(id).await.unwrap();
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = vec![];

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
    for p in phones {
        buttons.push(vec![InlineKeyboardButton::callback(
            format!("+7{}", p),
            format!("phone:{}", p),
        )]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    let mut nav_buttons = vec![];
    if page > 0 {
        nav_buttons.push(InlineKeyboardButton::callback(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            format!("p_page:{}", page - 1),
        ));
    }
    if (page + 1) * page_size < total_warehouses {
        nav_buttons.push(InlineKeyboardButton::callback(
            "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            format!("p_page:{}", page + 1),
        ));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if !nav_buttons.is_empty() {
        buttons.push(nav_buttons);
    }
    buttons.push(vec![InlineKeyboardButton::callback(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "main_menu",
    )]);

    InlineKeyboardMarkup::new(buttons)
}
